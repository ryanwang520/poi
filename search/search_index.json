{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Poi is a Python Package for writing data to xlsx files. It allows you to declaratively specify the Shape of your data, and Poi will manage how to write it to the corresponding Cell for you automatically. Poi is on top of the xlsxwriter library.</p>"},{"location":"#system-requirements","title":"System requirements","text":"<p>Poi requires Python 3.7+. </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install poi\n</code></pre>"},{"location":"#philosophy","title":"Philosophy","text":"<p>Manually writing excel file using library like xlsxwriter has long been a pain point for application developers, you have to specify what to write in each cell and row, how to merge cells, the style of each cell, .etc. Leading to code like this:</p> <pre><code># Iterate over the data and write it out row by row.\nfor item, cost in (expenses):\n    worksheet.write(row, col,     item)\n    worksheet.write(row, col + 1, cost)\n    row += 1\n\n# Write a total using a formula.\nworksheet.write(row, 0, 'Total')\nworksheet.write(row, 1, '=SUM(B1:B4)')\n\nmerge_format = workbook.add_format({\n    'bold':     True,\n    'border':   6,\n    'align':    'center',\n    'valign':   'vcenter',\n    'fg_color': '#D7E4BC',\n})\nworksheet.merge_range(2, 1, 3, 3, 'Merged Cells', merge_format)\n</code></pre> <p>I think its too low level for application developers who just want to export some data to excel file. And maintaining imperative code like this is error prone and so hard that we may want a better way to deal with exporting data to excel. Why not just write a Schema of what we want to export and there's some tool to turn it to a valid xlsx file? Hopefully, this is just what Poi does.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>A Hello World example.</p> <p>What wee need is just a <code>Sheet</code> object.</p> <pre><code>from poi import Sheet, Cell\nsheet = Sheet(\n    root=Cell(\"hello world\")\n)\n\nsheet.write('hello.xlsx')\n</code></pre> <p>Then an xlsx file has been created.</p> <p></p> <p>What happened? We've created a <code>Sheet</code> object with a single <code>Cell</code> Node, which just contains the text hello world, and then we call <code>sheet.write</code> to write the sheet object to the hello.xlsx file. </p> <p>See, that's pretty simple. Of course Poi's ability is far beyond this, jump to Basic Usage for more examples.</p>"},{"location":"basic-usage/","title":"Basic Usage","text":""},{"location":"basic-usage/#a-basic-example","title":"A Basic Example","text":"<p>Write title, a paragraph and a signature row.</p> <pre><code>from poi import Sheet, Row, Cell\n\nsheet = Sheet(\n    root=\n    [\n        Row(\n            children=[\n                Cell(\n                    \"title\",\n                    grow=True,\n                    align=\"center\",\n                )\n            ]\n        ),\n        Row(\n            children=[\n                Cell(\n                    \"this is your awesome content\",\n                    grow=True,\n                    border=1,\n                    valign=\"vcenter\",\n                    rowspan=4,\n                    height=100,\n                )\n            ]\n        ),\n        Row(colspan=8, children=[\n            Cell(\"signature:\", offset=5, grow=True,  bg_color='yellow'),\n            Cell(\"\")\n        ],\n            )\n    ],\n)\nsheet.write('out.xlsx')\n</code></pre> <p></p>"},{"location":"basic-usage/#export-a-data-table","title":"Export A Data Table","text":"<pre><code>from typing import NamedTuple\nfrom datetime import datetime\nimport random\n\nfrom poi import Sheet, Table\n\n\nclass Product(NamedTuple):\n    name: str\n    desc: str\n    price: int\n    created_at: datetime\n    img: str\n\n\ndata = [\n    Product(\n        name=f\"prod {i}\",\n        desc=f\"desc {i}\",\n        price=random.randint(1, 100),\n        created_at=datetime.now(),\n        img=\"./docs/assets/product.jpg\",\n    )\n    for i in range(5)\n]\ncolumns = [\n    {\n        \"type\": \"image\",\n        \"attr\": \"img\",\n        \"title\": \"Product Image\",\n        \"options\": {\"x_scale\": 0.27, \"y_scale\": 0.25},\n    },\n    (\"name\", \"Name\"),\n    (\"desc\", \"Description\"),\n    (\"price\", \"Price\"),\n    (\"created_at\", \"Create Time\"),\n]\nsheet = Sheet(\n    root=Table(\n        data=data,\n        columns=columns,\n        row_height=80,\n        cell_style={\n            \"color: red\": lambda record, col: col.attr == \"price\" and record.price &gt; 50\n        },\n        date_format=\"yyyy-mm-dd\",\n        align=\"center\",\n        border=1,\n    )\n)\nsheet.write(\"table.xlsx\")\n</code></pre>"},{"location":"basic-usage/#use-with-your-favorite-web-framework","title":"Use with your favorite Web Framework","text":"<p>You can integrate Poi with any web framework easily.</p>"},{"location":"basic-usage/#flask","title":"Flask","text":"<pre><code>from flask import send_file\n\ndef export(sheet, filename):\n    return send_file(\n        sheet.to_bytes_io(),\n        attachment_filename=filename,\n        mimetype=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    )\n</code></pre>"},{"location":"basic-usage/#django","title":"Django","text":"<pre><code>from django.http import HttpResponse\n\ndef export(sheet, filename):\n    response = HttpResponse(\n        sheet.to_bytes_io().read(),\n        content_type=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    )\n    response[\"Content-Disposition\"] = f\"attachment; filename={filename}\"\n    return response\n</code></pre>"}]}